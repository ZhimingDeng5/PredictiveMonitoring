version: "3.8"

services:

    rabbit:
        hostname: 'rabbit'
        image: rabbitmq:3.8.5-management
        ports:
            - '5672:5672'
            - '15672:15672'
        healthcheck:
            test: rabbitmq-diagnostics -q ping
            interval: 30s
            timeout: 30s
            retries: 3
        restart: unless-stopped
        volumes:
            - rabbit_data:/var/lib/rabbitmq/
            - rabbit_logs:/var/log/rabbitmq/
        networks:
            - net

    persistence-prediction:
        build: 
            context: ./
            dockerfile: ./prediction/Dockerfile
        environment:
            - NODECLASS=persistence
            - RABBITURL=rabbit
        restart: unless-stopped
        volumes:
            - persistence:/persistence/
        networks:
            - net

    master-prediction:
        build: 
            context: ./
            dockerfile: ./prediction/Dockerfile
        ports:
            - '8000:8000'
        environment:
            - NODECLASS=master
            - RABBITURL=rabbit
        restart: unless-stopped
        volumes:
            - predict_files:/app/predict_files/
            - task_files:/app/task_files/
        networks:
            - net

    worker-prediction:
        build: 
            context: ./
            dockerfile: ./prediction/Dockerfile
        environment:
            - NODECLASS=worker
            - RABBITURL=rabbit
        restart: unless-stopped
        volumes:
            - predict_files:/app/predict_files/
            - task_files:/app/task_files/
        networks:
            - net

    persistence-training:
        build: 
            context: ./
            dockerfile: ./training/Dockerfile
        environment:
            - NODECLASS=persistence
            - RABBITURL=rabbit
        restart: unless-stopped
        volumes:
            - persistence:/persistence/
        networks:
            - net

    master-training:
        build: 
            context: ./
            dockerfile: ./training/Dockerfile
        ports:
            - '8001:8000'
        environment:
            - NODECLASS=master
            - RABBITURL=rabbit
        restart: unless-stopped
        volumes:
            - training_files:/app/training_files/
            - task_files:/app/task_files/
        networks:
            - net

    worker-training:
        build: 
            context: ./
            dockerfile: ./training/Dockerfile
        environment:
            - NODECLASS=worker
            - RABBITURL=rabbit
        restart: unless-stopped
        volumes:
            - training_files:/app/training_files/
            - task_files:/app/task_files/
        networks:
            - net

    caddy:
        build: caddy
        ports:
            - '80:80'
            - '443:443'
        restart: unless-stopped
        volumes:
            - front:/usr/share/caddy
        networks:
            - net

    front:
        build: front-end
        restart: unless-stopped
        ports:
            - '4200:4200'
        volumes:
            - front:/app/dist
        networks:
            - net

volumes:
    persistence:
    training_files:
    predict_files:
    task_files:
    front:
    rabbit_data:
    rabbit_logs:

networks:
    net:
        driver: bridge