version: "3.8"

services:

    rabbit:
        hostname: 'rabbit'
        image: rabbitmq:3.8.5-management
        ports:
            - '5672:5672'
            - '15672:15672'
        healthcheck:
            test: rabbitmq-diagnostics -q ping
            interval: 30s
            timeout: 30s
            retries: 3
        restart: unless-stopped
        volumes:
            - ~/volume/rabbit-data:/var/lib/rabbitmq/
            - ~/volume/rabbit-logs:/var/log/rabbitmq/

    persistence:
        build: back-end
        environment:
            - NODECLASS=persistence
            - RABBITURL=rabbit
        restart: unless-stopped
        volumes:
            - ~/volume/persistence:/persistence
            - ~/volume/task_files:/app/task_files

    master:
        build: back-end
        ports:
            - '8000:8000'
        environment:
            - NODECLASS=master
            - RABBITURL=rabbit
        restart: unless-stopped




#    front-end:
#        build: front-end
#        ports:
#            - "4200:4200"
#        # expose:
#        #     - "4200"
#        # restart: always
#        volumes:
#            - frontend_data:/app/dist
#        networks:
#            - predictive-net



#    predictive-master:
#        build: back-end
#        ports:
#            - "8000:8000"
#        expose:
#            - "8000"
#        hostname: predictive-master
#        environment:
#            - NODECLASS=master
#            - RABBITURL=queue
#        restart: always
#        depends_on:
#            resource-queue:
#                condition: service_healthy
#            predictive-persistence:
#                condition: service_started
#        volumes:
#            - task_files:/app/task_files
#        networks:
#            - predictive-net
#    predictive-worker:
#        build: back-end
#        environment:
#            - NODECLASS=worker
#            - RABBITURL=queue
#        restart: always
#        depends_on:
#            resource-queue:
#                condition: service_healthy
#            predictive-persistence:
#                condition: service_started
#        volumes:
#            - task_files:/app/task_files
#        networks:
#            - predictive-net

volumes:
    predict_files:
    frontend_data:
    rabbit-data: